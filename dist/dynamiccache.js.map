{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","index.js","lib/dynamiccache.js","node_modules/sw-cache-helper/lib/cachehelper.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dynamiccache.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var DynamicCache = require('./lib/dynamiccache.js');\n\nself.DynamicCache = DynamicCache;\n","/* global Promise, fetch, Response */\n'use strict';\n\nvar CacheHelper = require('sw-cache-helper');\n\nfunction DynamicCache(name) {\n  this.name = name;\n}\n\n// Handle postMessage events sent to the ServiceWorker\nDynamicCache.prototype.onMessage = function dc_onMessage(event) {\n  var data = event.data;\n  if (this[data.command]) {\n    return this[data.command].call(this, data.parameters);\n  }\n};\n\n// Handles request to the worker, in this case pretty dummy, will\n// return the content of the cache.\nDynamicCache.prototype.onFetch = function(request, response) {\n  return CacheHelper.getCache(this.name).then(function(cache) {\n    return cache.match(request).then(function(res) {\n      if (!res) {\n        return fetch(request);\n      }\n      return Promise.resolve(res);\n    });\n  });\n};\n\nDynamicCache.prototype.list = function dc_list() {\n  var self = this;\n  return CacheHelper.getCache(this.name).then(function(cache) {\n    return cache.keys().then(function(keys) {\n      var result = [];\n      // Get just the urls, we have Response object that cannot be cloned\n      // to send via postMessage\n      keys.forEach(function(key) {\n        result.push(key.url);\n      });\n      self.broadcastMessage(result);\n    });\n  });\n};\n\nDynamicCache.prototype.post = function dc_post(options) {\n  var url = options.url;\n  var content = options.content;\n  var headers = options.headers || {};\n\n  if (!headers['Content-Type']) {\n    headers['Content-Type'] = 'text/html';\n  }\n\n  var response = new Response(content, {\n    headers: headers\n  });\n  return CacheHelper.getCache(this.name).then(function(cache) {\n    cache.put(url, response);\n  });\n};\n\nDynamicCache.prototype.delete = function dc_delete(options) {\n  var url = options.url;\n\n  if (!url) {\n    return Promise.reject();\n  }\n\n  return CacheHelper.getCache(this.name).then(function(cache) {\n    return cache.delete(url);\n  });\n};\n\nmodule.exports = DynamicCache;\n","/* global caches, fetch, Promise, Request, module*/\n(function() {\n  'use strict';\n\n  var CacheHelper = {\n    defaultCacheName: 'offline',\n    getCache: function getCache(name) {\n      return caches.open(name);\n    },\n    getDefaultCache: function getDefaultCache() {\n      return this.getCache(this.defaultCacheName);\n    },\n    fetchAndCache: function fetchAndChache(request, cache) {\n      return fetch(request.clone()).then(function(response) {\n        var clone = response.clone();\n        if (parseInt(clone.status) < 400) {\n          cache.put(request.clone(), response.clone());\n        }\n\n        return response.clone();\n      });\n    },\n    addAll: function addAll(cache, urls) {\n      if (!cache) {\n        throw new Error('Need a cache to store things');\n      }\n      // Polyfill until chrome implements it\n      if (typeof cache.addAll !== 'undefined') {\n        return cache.addAll(urls);\n      }\n\n      var promises = [];\n      var self = this;\n      urls.forEach(function(url) {\n        promises.push(self.fetchAndCache(new Request(url), cache));\n      });\n\n      return Promise.all(promises);\n    }\n  };\n\n  module.exports = CacheHelper;\n})();\n"]}